{"version":3,"sources":["Sankey.js","serviceWorker.js","index.js"],"names":["options","Sankey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","from","to","weight","handleChange","bind","assertThisInitialized","handleSubmit","react_default","a","createElement","className","index_esm","chartType","width","height","onSubmit","htmlFor","id","name","onChange","value","length","href","target","rel","e","setState","defineProperty","preventDefault","newItem","newArray","slice","push","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Sankey","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAIMA,SAAU,IAyFDC,cAtFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,KAAM,CACf,CAAC,OAAQ,KAAM,UACf,CAAC,IAAK,IAAK,IAEbC,KAAM,GAAIC,GAAI,GAAIC,OAAQ,IAC9BX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KARHA,wEAYjB,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,UAAU,SACVC,MAAM,MACNC,OAAO,QACPf,KAAML,KAAKI,MAAMC,KACjBX,QAASA,IAEXmB,EAAAC,EAAAC,cAAA,QAAMM,SAAUrB,KAAKY,cACnBC,EAAAC,EAAAC,cAAA,SAAOO,QAAQ,aAAf,QAGAT,EAAAC,EAAAC,cAAA,SACEQ,GAAG,YACHC,KAAK,OACLC,SAAUzB,KAAKS,aACfiB,MAAO1B,KAAKI,MAAME,OAEpBO,EAAAC,EAAAC,cAAA,SAAOO,QAAQ,WAAf,MAGAT,EAAAC,EAAAC,cAAA,SACEQ,GAAG,UACHC,KAAK,KACLC,SAAUzB,KAAKS,aACfiB,MAAO1B,KAAKI,MAAMG,KAEpBM,EAAAC,EAAAC,cAAA,SAAOO,QAAQ,eAAf,UAGAT,EAAAC,EAAAC,cAAA,SACEQ,GAAG,cACHC,KAAK,SACLC,SAAUzB,KAAKS,aACfiB,MAAO1B,KAAKI,MAAMI,SAEpBK,EAAAC,EAAAC,cAAA,sBACQf,KAAKI,MAAMC,KAAKsB,UAI1Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,wBACcF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWY,KAAK,mDAAmDC,OAAO,SAASC,IAAI,uBAApG,0DAOTC,GACX/B,KAAKgC,SAALlC,OAAAmC,EAAA,EAAAnC,CAAA,GAAiBiC,EAAEF,OAAOL,KAAOO,EAAEF,OAAOH,6CAG/BK,GAEX,GADAA,EAAEG,iBACGlC,KAAKI,MAAME,MAASN,KAAKI,MAAMG,IAAOP,KAAKI,MAAMI,OAAtD,CAGA,IAAM2B,EAAU,CAACnC,KAAKI,MAAME,KAAMN,KAAKI,MAAMG,GAAIP,KAAKI,MAAMI,QACxD4B,EAAWpC,KAAKI,MAAMC,KAAKgC,QAC/BD,EAASE,KAAKH,GACdnC,KAAKgC,SAAS,SAAA5B,GAAK,MAAK,CACtBC,KAAM+B,EACN9B,KAAM,GACNC,GAAI,GACJC,OAAQ,cAlFO+B,IAAMC,WCMPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPlC,EAAAC,EAAAC,cAACiC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d33c0696.chunk.js","sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\nimport './App.css';\n\nconst options = {};\n\nclass Sankey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [\n          [\"From\", \"To\", \"Weight\"],\n          [\"A\", \"X\", 0]\n        ],\n        from: '', to: '', weight: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Finance Sankey</h3>\n        <Chart\n          chartType=\"Sankey\"\n          width=\"60%\"\n          height=\"300px\"\n          data={this.state.data}\n          options={options}\n        />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"flow-from\">\n            From\n          </label>\n          <input\n            id=\"flow-from\"\n            name=\"from\"\n            onChange={this.handleChange}\n            value={this.state.from}\n          />\n          <label htmlFor=\"flow-to\">\n            To\n          </label>\n          <input\n            id=\"flow-to\"\n            name=\"to\"\n            onChange={this.handleChange}\n            value={this.state.to}\n          />\n          <label htmlFor=\"flow-weight\">\n            Amount\n          </label>\n          <input\n            id=\"flow-weight\"\n            name=\"weight\"\n            onChange={this.handleChange}\n            value={this.state.weight}\n          />\n          <button>\n            Add #{this.state.data.length}\n          </button>\n        </form>\n        </header>\n        <div className=\"footer\">\n          <p>\n            Inspired by <a className=\"App-link\" href=\"https://github.com/TylerTalks/data_visualization\" target=\"_blank\" rel=\"noopener noreferrer\">finance_sankey</a>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.from || !this.state.to || !this.state.weight) {\n      return;\n    }\n    const newItem = [this.state.from, this.state.to, this.state.weight];\n    var newArray = this.state.data.slice();\n    newArray.push(newItem);\n    this.setState(state => ({\n      data: newArray,\n      from: '',\n      to: '',\n      weight: ''\n    }));\n  }\n}\n\nexport default Sankey;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Sankey from './Sankey';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Sankey />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}